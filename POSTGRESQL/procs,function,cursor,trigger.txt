--STORED PROCEDURE

create table department(
	d_id serial primary key,
	d_name varchar(150)
)

create table employee(
e_id serial primary key,
	e_name varchar(150),
	e_location varchar(150),
	d_id int references department(d_id)
)

select * from department;

create or replace procedure sp_emp_dtls(
e_name varchar,
	e_location varchar(50),
	dp_name varchar(50)
)
language plpgsql
AS $$
declare 
dept_id int;
BEGIN
select d_id into dept_id from department where d_name=dp_name;

if(dept_id is null) then
insert into department(d_name) values (dp_name) returning d_id into dept_id;
insert into employee(e_name,e_location,d_id) values (e_name,e_location,dept_id);
else
insert into employee(e_name,e_location,d_id) values (e_name,e_location,dept_id);
end if;
END;
$$;

call sp_emp_dtls('test','chennai','HR')

----------------------------------------------------------------------------------------------------------------------

--CALL FUNCTION FROM PROCEDURE

create or replace procedure sp_emp_dtls(
e_name varchar,
	e_location varchar(50),
	dp_name varchar(50),
	e_salary int,
	b_salary int
)
language plpgsql
AS $$
declare 
dept_id int;
total_amount int;
BEGIN
select d_id into dept_id from department where d_name=dp_name;
select fn_cal_salary(e_salary,b_salary) into total_amount;
if(dept_id is null) then
insert into department(d_name) values (dp_name) returning d_id into dept_id;
insert into employee(e_name,e_location,d_id,emp_salary,bonus_salary,total_salary) values (e_name,e_location,dept_id,e_salary,b_salary,total_amount);
else
insert into employee(e_name,e_location,d_id,emp_salary,bonus_salary,total_salary) values (e_name,e_location,dept_id,e_salary,b_salary,total_amount);
end if;
END;
$$;

create or replace function fn_cal_salary(e_salary integer ,b_salary integer)
returns integer 
as $$
declare
total integer;
BEGIN
total :=e_salary+b_salary;
return total;
END;
$$
language plpgsql;

call sp_emp_dtls('TEMP','VELLORE','HR',20000,5000);
SELECT fn_cal_salary(15,20) as result;

select * from employee;

------------------------------------------------------------------------------------------------------------------------------

--triggers

create table orders(
	order_id serial primary key,
	order_name varchar(155),
	order_date timestamp
)

create or replace function fn_update_order_date()
returns trigger AS 
$$
BEGIN
New.order_date := now();
return new;
END;
$$ LANGUAGE PLPGSQL;

create or replace trigger trg_update_orders_date
BEFORE insert on orders
for each row
execute function fn_update_order_date();

insert into orders(order_name) values('laptop')

select * from orders;

-----------------------------------------------------------------------------------------------------

--VACUUM (FREE UP THE DEAD ROWS)

vacuum verbose docs_presidents

select pg_size_pretty(pg_total_relation_size('docs_presidents'))

select relname,
n_live_tup,
n_dead_tup
from pg_stat_user_tables


-----------------------------------------------------------------------------------------------------

--CROSSTAB

psql -U postgres -d learning -h localhost -p 5432 -f C:\Users\kamal\Downloads\rainfalldata.sql



select * from crosstab(
'select location,year,sum(raindays)::int
	from rainfalls group by location, year
	order by location,year
	'


)as ct
(
	"Location" text,
	"2012" int,
	"2013" int,
	"2014" int,
	"2015" int,
	"2016" int,
	"2017" int

)

create extension if not exists tablefunc;